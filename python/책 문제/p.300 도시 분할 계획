-하나의 큰도시를 두 도시로 나누는데 비용을 가장 적게쓰는방법
-아이디어는 크루스칼 알고리즘을 이용하여 최선의 루트를 짠다음 가장 비싼 도로(간선)을 삭제시켜서 두개의 도시로 만든다

def find_parent(parent,x):
  if(parent[x] != x):
    parent[x] = find_parent(parent,parent[x])
  return parent[x]
def union_parent(parent,a,b):
  a = find_parent(parent,a)
  b = find_parent(parent,b)
  if(a < b):
    parent[b] = a
  else:
    parent[a] = b

v,e = map(int,input().split())
edges = []
parent = [0] * (v+1)

for i in range(1,v+1):
  parent[i] = i

for i in range(e):
  a,b,cost = map(int,input().split())
  edges.append((cost,a,b))

edges.sort()
max = -(1e9)
result = 0
for edge in edges:
  cost,a,b = edge
  a = find_parent(parent,a)
  b = find_parent(parent,b)
  if(a != b):
    union_parent(parent,a,b)
    result += cost
    if(max < cost):
      max = cost

print(result - max)